#!/usr/bin/python

"""
output on a parallel port under solaris

uses pypi: Louie, BitVector, rdflib
ubuntu package: python-parallel

follow http://www.captain.at/programming/solaris/ to install
http://sourceforge.net/projects/libieee1284

you could do 'make install' to install the python module, but it
doesn't work right. see code below for a direct ioctl->driver version

put 'blacklist lp' in /etc/modprobe.d/blacklist

"""
from solarisparport import SolarisParport, LinuxParallel
from twisted.internet import reactor
from twisted.internet import task
import hubclient
import socket, logging, os
from louie import dispatcher
from rdflib.Graph import Graph
from rdflib import Literal, Variable, Namespace
from BitVector import BitVector

ROOM = Namespace("http://projects.bigasterisk.com/room/")

from logsetup import commonlogsetup
# can't setup log yet- need to open ports as root first

class ParportBits(object):
    """allow the bits on the parallel port to be set individually"""
    def __init__(self, port):
        self.port = port
        self.port.open()
        self.data = BitVector(size=8)
        self.write()

    def write(self):
        self.port.write_data(int(self.data))

    def set(self, bit, value):
        """bit is measured from the LSB"""
        log.info("bit %s to %s" % (bit, value))
        self.data[7-bit] = int(value)
        self.write()

#port = 0x3bc # only supporting one port per process for now
p = LinuxParallel() # SolarisParport()
bits = ParportBits(p)
os.seteuid(501) # back to drewp for logging

log = commonlogsetup(filename="log.parport")
log.setLevel(logging.INFO)

hubclient.connect()
dispatcher.send("parport ready for messages")

graph = Graph()
graph.parse("devices.n3", format="n3")

thisHost = Literal(socket.getfqdn())
thisDevice = Literal(bits.port.device)
log.info("I have %r on %r" % (thisDevice, thisHost))
for pin, bit, pulse in graph.query(
    """SELECT ?pin ?bit ?pulse {
         ?pin rm:host ?host;
         rm:port ?port;
         rm:bit ?bit .
         OPTIONAL { ?pin rm:pulse ?pulse }
       }""",
    initNs=dict(rm=ROOM),
    initBindings={Variable("?port") : thisDevice,
                  Variable("?host") : thisHost,
                  }):
    log.info("watching for changes to %s", pin)
    def setter(obj, bit=bit, _pulse=pulse):
        if _pulse is None:
            bits.set(int(bit), value=obj)
        else:
            bits.set(int(bit), value=obj)
            reactor.callLater(float(_pulse), bits.set, int(bit), value=0)

    dispatcher.connect(setter,
                       (str(pin), str(ROOM['value']), None), weak=False)


prevBusy = [None]
def inputs():
    b = p.getInBusy()
    if b != prevBusy[0]:
        prevBusy[0] = b
        log.info("heater on %s" % (not b))
    #bits.set(0, value=b)
task.LoopingCall(inputs).start(1)

reactor.run()

