"""
todo: alsa volumes, polyp routing, window without menu/status
"""
import time
from twisted.python import util
from twisted.internet import reactor, task
from twisted.application import internet, service
from nevow import appserver, inevow
from nevow import loaders, rend, static, athena, tags as T

from rdflib.sparql.sparqlGraph import SPARQLGraph as Graph
from rdflib import URIRef, Literal, BNode, Namespace, FileInputSource
from rdflib import RDF, RDFS

import rdfaction

class Slider(athena.LiveFragment):
    jsClass = u"RoomWidget.Slider"
    docFactory = loaders.xmlstr("""
   <div xmlns:nevow="http://nevow.com/ns/nevow/0.1"
        xmlns:n="http://nevow.com/ns/nevow/0.1"
        nevow:render="liveFragment">
     <table border="1" cellpadding="10" bgcolor="lightgray">
       <tr>
         <td>
           <div><n:attr name="id" n:render="name" /></div>
           <br/><br/>
           <div n:render="name" />
         </td>
       </tr>
     </table></div>""")
    allowedMethods = ['getName', 'sliderChange']
    def __init__(self, lightName):
        athena.LiveFragment.__init__(self)
        self.lightName = lightName

    def getName(self):
        return unicode(self.lightName)
    
    def render_name(self, ctx, data):
        return self.lightName

    def setValue(self, val):
        self.callRemote('setValue', val)

    def sliderChange(self, level):
        level = float(level)
        print "set", self.lightName, level
        roomAction.set_light(self.lightName, level)

        #reactor.callLater(1, self.callRemote, 'setValue', 1)

class MainPage(athena.LivePage):
    docFactory = loaders.xmlfile("main.html")
    addSlash = True
    
    def __init__(self, *a, **kw):
        super(MainPage, self).__init__(*a, **kw)
        self.jsModules.mapping[u'RoomWidget'] = util.sibpath(__file__, 'widgets.js')

    def childFactory(self, ctx, name):
        if name in ['blueshoes']:
            return static.File(name)
        return athena.LivePage.childFactory(self, ctx, name)

    def render_slider(self, ctx, data):
        s = Slider(data)
        s.page = self
        return ctx.tag[s]

    # i shouldn't have to write this one
    def render_item(self, ctx, data):
        return str(data)

    def data_lightNames(self, ctx, data):
        return ['drewdesk', 'deskhalo', 'couchleft', 'couchright', 'dining']

    def beforeRender(self, ctx):
        inevow.IRequest(ctx).prePathURL = lambda: '/room/'

class _MainPage(rend.Page):
    def child_room(self, ctx):
        return MainPage()
    def childFactory(self, ctx, name):
        if name in ['clock.js', 'main.html', 'serve']:
            return static.File(name)

roomAction = rdfaction.RoomAction()

application = service.Application('room')
site = appserver.NevowSite(_MainPage())
webServer = internet.TCPServer(8082, site)
webServer.setServiceParent(application)
