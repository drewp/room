"""
todo: alsa volumes, polyp routing, window without menu/status
"""
import time, logging
from twisted.python import util
from twisted.internet import reactor, task
from twisted.application import internet, service
from nevow import appserver, inevow
from nevow import loaders, rend, static, athena, tags as T

import RDF

from simple import Button


logging.basicConfig()
log = logging.getLogger()
log.setLevel(logging.DEBUG)

import rdfaction

class Slider(athena.LiveFragment):
    jsClass = u"RoomWidget.Slider"
    docFactory = loaders.xmlstr("""
   <div xmlns:nevow="http://nevow.com/ns/nevow/0.1"
        xmlns:n="http://nevow.com/ns/nevow/0.1"
        nevow:render="liveFragment">
     <table border="1" cellpadding="10" bgcolor="lightgray">
       <tr>
         <td>
           <div><n:attr name="id" n:render="name" /></div>
           <br/><br/>
           <div n:render="name" />
         </td>
       </tr>
     </table></div>""")
    allowedMethods = ['getName', 'sliderChange']
    def __init__(self, lightName):
        athena.LiveFragment.__init__(self)
        self.lightName = lightName

    def getName(self):
        return unicode(self.lightName)
    
    def render_name(self, ctx, data):
        return self.lightName

    def setValue(self, val):
        self.callRemote('setValue', val)

    def sliderChange(self, level):
        level = float(level)
        roomAction.set_light(self.lightName, level)

        #reactor.callLater(1, self.callRemote, 'setValue', 1)

class ActionButton(Button):
    def onClick(self):
        ns = "http://projects.bigasterisk.com/room/"
        if self.label in roomAction.action_uris():
            roomAction.fire_action(RDF.Uri(self.label))
        else:
            print "unknown label", self.label

class MainPage(athena.LivePage):
    docFactory = loaders.xmlfile("main.html")
    addSlash = True
    
    def __init__(self, *a, **kw):
        super(MainPage, self).__init__(*a, **kw)
        self.jsModules.mapping.update({
            u'RoomWidget' : util.sibpath(__file__, 'widgets.js'),
            u'SimpleWidget' : util.sibpath(__file__, 'simple.js'),})

    def childFactory(self, ctx, name):
        if name in ['blueshoes']:
            return static.File(name)
        return athena.LivePage.childFactory(self, ctx, name)

    def render_slider(self, ctx, data):
        s = Slider(data)
        s.page = self
        return ctx.tag[s]

    def render_button(self, ctx, data):
        label = ctx.tag.children[0] # for plain text in the tag
        if data: # for when 'data' is active, like in a sequence
            label = data
        w = ActionButton(label)
        w.page = self
        return w

    def data_actions(self, ctx, data):
        print roomAction.action_uris()
        return roomAction.action_uris()

    def render_actionButton(self, ctx, data):
        ctx.fillSlots('uri', str(data))
        return ctx.tag

    def render_introspection(self, ctx, data):
        f = athena.IntrospectionFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]


    # i shouldn't have to write this one
    def render_item(self, ctx, data):
        return str(data)

    def data_lightNames(self, ctx, data):
        return ['drewdesk', 'deskhalo', 'couchleft', 'couchright', 'dining']

    def data_sliderControls(self, ctx, data):
        """all controls that could be adjusted with a slider"""


    def beforeRender(self, ctx):
        inevow.IRequest(ctx).prePathURL = lambda: '/room/'

class _MainPage(rend.Page):
    def child_room(self, ctx):
        return MainPage()
    def childFactory(self, ctx, name):
        if name in ['clock.js', 'main.html', 'serve']:
            return static.File(name)

roomAction = rdfaction.RoomAction(withTwisted=True)

application = service.Application('room')
site = appserver.NevowSite(_MainPage())
webServer = internet.TCPServer(8082, site)
webServer.setServiceParent(application)
