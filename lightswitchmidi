#!/usr/bin/python

"""pyalsamidi at http://infohost.nmt.edu/~dbaird/software/

n3->rdf convertor at http://www.w3.org/DesignIssues/Notation3.html

almost related: http://lists.w3.org/Archives/Public/www-archive/2001Nov/0033
"""

import os, select, time, xmlrpclib, socket
from twisted.internet import reactor, tksupport, defer
from pyalsamidi import pyalsamidi as amidi
from logsetup import commonlogsetup
import RDF

log = commonlogsetup(filename=None)


class NoteCode:
    def __init__(self):
        self.phrase = []
        self.last_note_time = 0
        self.max_pause_time = .5 # sec
        self.connect()

        self.action([67,60])

    def connect(self):
        self.light_server = xmlrpclib.ServerProxy("http://dot:%s" %
                              socket.getservbyname("lights","tcp"))

    def event(self,ev):
        if ev.data.__class__ != amidi.MidiEvent.NoteOn:
            return

        now = time.time()
        if now - self.last_note_time > self.max_pause_time:
            self.phrase[:] = []

        self.last_note_time = now
        self.phrase.append(ev.data.note)

        try:
            matched = self.action(self.phrase)
            if matched:
                self.phrase[:] = []
        except Exception, e:
            if isinstance(e, (KeyboardInterrupt, SystemExit)):
                raise
            log.error(e)

    def set_light(self, name, lev):
        try:
            log.info("%s to %s" % (name,lev))
            self.light_server.setLight(name,lev)
        except xmlrpclib.Fault, e:
            log.error("%s on command setLight(%r,%r)" % (e, name, lev))
            self.connect()

    def load_model(self, filename="/my/proj/room/midicodes.n3"):
        model = RDF.Model(RDF.MemoryStorage())
        u = RDF.Uri("file:%s" % filename)
        try:
            for s in RDF.Parser('turtle').parse_as_stream(u):
                model.add_statement(s)
        except (Exception, ), e:
            # e.__class__.__module__ is "RDF", not the real module!
            if e.__class__.__name__ != "RedlandError":
                raise
            raise ValueError("Error parsing %s: %s" % (u, e))
        return model

    def action(self, phrase):
        model = self.load_model()

        phrase_literal = RDF.Node(" ".join(map(str, phrase)))
        phrase_quoted_literal = '"%s"' % phrase_literal #?
        log.info("checking phrase %s" % phrase_quoted_literal)

        prefixes = """PREFIX midi: <http://projects.bigasterisk.com/midi/>
                      PREFIX room: <http://projects.bigasterisk.com/room/>
                      """

        for res in RDF.SPARQLQuery(prefixes + '''
                SELECT ?action
                WHERE {
                    [midi:notes %s; room:triggers ?action] .
                }''' % phrase_quoted_literal).execute(model):
            action = res['action'].uri
            log.info("running action %s" % action)

            for res in RDF.SPARQLQuery(prefixes + '''
                    SELECT ?light ?level
                    WHERE {
                     <%s> room:lightLevel [room:light ?light; room:to ?level] .
                    }''' % action).execute(model):
                self.do_lightlevel(res['light'].uri, res['level'])

            for res in RDF.SPARQLQuery(prefixes + '''
                    SELECT ?command
                    WHERE {
                        <%s> room:execute ?command.
                    }''' % action).execute(model):
                log.info("running %s" % str(res['command']))
                ret = os.system(str(res['command']))
                if ret != 0:
                    log.error("command returned %d" % (ret >> 8))
                    
    def do_lightlevel(self, light_uri, level):
        prefix = "http://projects.bigasterisk.com/room/lights/"
        lightname = str(light_uri)[len(prefix):]

        assert (level.literal_value['datatype'] ==
                RDF.Uri("http://www.w3.org/2001/XMLSchema#float"))
        level = float(level.literal_value['string'])

        log.info("light %s to level %s" % (lightname, level))
        self.set_light(lightname, level)
            
seq = amidi.Sequencer('Test Sequencer')
inp = seq.create_midiin('Test Midi In')

outp = seq.create_midiout('Test Midi Out')
queue = seq.create_queue()
ppq = 120
queue.set_bpm(120, ppq)
queue.start()

# If you do not have a musical keyboard connected to 64:0, you might
# need to modify this line:
os.system('aconnect -t %d 64:0 %d:%d' % (queue.id, seq.id, inp.id))
os.system('aconnect -t %d %d:%d 64:0' % (queue.id, seq.id, outp.id))

nc = NoteCode()

while 1:
    a, _, _ = select.select([inp], [], [], .1)
    while (inp in a) or inp.events_pending():
        a = []
        ev = inp.read_event()
        nc.event(ev)
