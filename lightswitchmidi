#!/usr/bin/python

"""pyalsamidi at http://infohost.nmt.edu/~dbaird/software/

n3->rdf convertor at http://www.w3.org/DesignIssues/Notation3.html

almost related: http://lists.w3.org/Archives/Public/www-archive/2001Nov/0033

cd soundfont
fluidsynth
prog 0 86

alsa-patch-bay



"""

import os, select, time, xmlrpclib, socket
from twisted.internet import reactor, tksupport, defer
from pyalsamidi import pyalsamidi as amidi
from logsetup import commonlogsetup
import RDF
from rdfaction import RoomAction

log = commonlogsetup(filename=None)

class NoteCode:
    def __init__(self):
        self.phrase = []
        self.last_note_time = 0
        self.max_pause_time = .5 # sec

        self.room_action = RoomAction()

        #self.action([60,65]) # tester

    def event(self,ev):
        if ev.data.__class__ != amidi.MidiEvent.NoteOn:
            return

        now = time.time()
        if now - self.last_note_time > self.max_pause_time:
            self.phrase[:] = []

        self.last_note_time = now
        self.phrase.append(ev.data.note)

        try:
            matched = self.action(self.phrase)
            if matched:
                self.phrase[:] = []
        except Exception, e:
            if isinstance(e, (KeyboardInterrupt, SystemExit)):
                raise
            log.error(e)


    def action(self, phrase):
        phrase_literal = RDF.Node(" ".join(map(str, phrase)))
        phrase_quoted_literal = '"%s"' % phrase_literal #?
        log.info("checking phrase %s" % phrase_quoted_literal)

        return self.room_action.fire(
            "midi:notes",#"<http:/projects.bigasterisk.com/midi/notes>",
            phrase_quoted_literal)
        
seq = amidi.Sequencer('Test Sequencer')
inp = seq.create_midiin('Test Midi In')

outp = seq.create_midiout('Test Midi Out')
queue = seq.create_queue()
ppq = 120
queue.set_bpm(120, ppq)
queue.start()

# If you do not have a musical keyboard connected to 64:0, you might
# need to modify this line:
os.system('aconnect -t %d 64:0 %d:%d' % (queue.id, seq.id, inp.id))
os.system('aconnect -t %d %d:%d 64:0' % (queue.id, seq.id, outp.id))

nc = NoteCode()

while 1:
    a, _, _ = select.select([inp], [], [], .1)
    while (inp in a) or inp.events_pending():
        a = []
        ev = inp.read_event()
        nc.event(ev)
