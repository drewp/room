#!/usr/bin/python
"""
normal accessing of the 'temperature' field on the sensors wasn't
working. I always got '85' (the power-on reset value). owfs verison is 2.7p2

http://sourceforge.net/mailarchive/forum.php?thread_name=fba87cb90612051724o705bfed0ub780325b915ed541%40mail.gmail.com&forum_name=owfs-developers

Asking for simultaneous read seems to work, and I'm fine with doing that.

the stock modules for onewire are bad; they will take all your CPU. to
turn them off, see:
http://tomasz.korwel.net/2006/07/02/owfs-instalation-on-ubuntu-606/#comment-12246

For the python 'ow' package, get
http://downloads.sourceforge.net/owfs/owfs-2.7p7.tar.gz?modtime=1222687523&big_mirror=0
or similar. Install the libusb-dev and swig packages first for usb and
python support.


"""
import time, logging, traceback
from louie import dispatcher
from twisted.internet.task import LoopingCall
from twisted.internet import reactor
import ow

import hubclient
from logsetup import commonlogsetup


log = commonlogsetup(filename=None)
log.setLevel(logging.INFO)

ow.init('u')

ow.owfs_put('/settings/units/temperature_scale', 'F')

def getTemps():
    ret = {}
    try:
        ow.owfs_put('/uncached/simultaneous/temperature', '1')
        for sens in ow.Sensor('/').sensors():
            log.debug("found sensor %r" % sens)
            if sens.type == 'DS18S20':
                try:
                    t = sens.temperature.strip()
                    log.debug("got temp %r" % t)
                    if t == '185':
                        log.warn("sensor %s says 185, probably wrong" % sens.address)
                        continue
                except ow.exUnknownSensor, e:
                    log.warn(e)
                    continue
                ret[sens.address] = t
    except KeyboardInterrupt: raise
    except Exception, e:
        traceback.print_exc()
        print "returning %r" % ret
    log.debug("getTemps -> %r" % ret)
    return ret

hubclient.connect()

def sendTemps():
    temps = getTemps()
    log.debug(temps)
    dispatcher.send('temps', temps=temps)

sendTemps()

LoopingCall(sendTemps).start(120)
reactor.run()
